https://dataplatform.cloud.ibm.com/analytics/notebooks/v2/8d12c70c-90d5-425c-a971-1c2d317c8f8e?projectid=591d8a8c-4961-4a9f-ae9d-45c3354b8d69&context=wdp

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler,PolynomialFeatures
from sklearn.linear_model import LinearRegression
%matplotlib inline

file_name='https://s3-api.us-geo.objectstorage.softlayer.net/cf-courses-data/CognitiveClass/DA0101EN/coursera/project/kc_house_data_NaN.csv'
df=pd.read_csv(file_name)

df.head()
df.dtypes
df.describe()

df.drop(['Unnamed: 0','id'], axis=1, inplace= True)
df.describe()

print("number of NaN values for the column bedrooms :", df['bedrooms'].isnull().sum())
print("number of NaN values for the column bathrooms :", df['bathrooms'].isnull().sum())

mean=df['bedrooms'].mean()
df['bedrooms'].replace(np.nan,mean, inplace=True)

mean=df['bathrooms'].mean()
df['bathrooms'].replace(np.nan,mean, inplace=True)
print("number of NaN values for the column bedrooms :", df['bedrooms'].isnull().sum())
print("number of NaN values for the column bathrooms :", df['bathrooms'].isnull().sum())

floor_counts = df['floors'].value_counts().to_frame()
floor_counts

sns.boxplot(x='waterfront', y='price', data=df)

sns.regplot(x='sqft_above', y='price', data=df)
df[['sqft_above','price']].corr()

df.corr()['price'].sort_values()

X = df[['long']]
Y = df['price']
lm = LinearRegression()
lm.fit(X,Y)
lm.score(X, Y)

X = df[['sqft_living']]
Y = df[['price']]
lr = LinearRegression()
lr.fit(X,Y)
print('The R^2 value for this model is: ', lr.score(X,Y))

features =['floors', 'waterfront','lat' ,'bedrooms' ,'sqft_basement' ,'view' ,'bathrooms','sqft_living15','sqft_above','grade','sqft_living']     

X = df[features]
Y = df[['price']]
lmr = LinearRegression()
lmr.fit(X,Y)
lmr.predict(X)
print('The R^2 value for this model is: ', lmr.score(X,Y) )
print('The predicted values are: \n', lmr.predict(X))

Input=[('scale',StandardScaler()),('polynomial', PolynomialFeatures(include_bias=False)),('model',LinearRegression())]

Z = df[features]
Y= df[['price']]
pipe = Pipeline(Input)
pipe.fit(Z,Y)
print('The R^2 value is: ', pipe.score(Z,Y))

from sklearn.model_selection import cross_val_score
from sklearn.model_selection import train_test_split
print("done")

features =["floors", "waterfront","lat" ,"bedrooms" ,"sqft_basement" ,"view" ,"bathrooms","sqft_living15","sqft_above","grade","sqft_living"]    
X = df[features]
Y = df['price']

x_train, x_test, y_train, y_test = train_test_split(X, Y, test_size=0.15, random_state=1)


print("number of test samples:", x_test.shape[0])
print("number of training samples:",x_train.shape[0])

from sklearn.linear_model import Ridge

pr = PolynomialFeatures(degree=2)
x_train_pr = pr.fit_transform(x_train)
x_test_pr = pr.fit_transform(x_test)
RR = Ridge(alpha=0.1)
RR.fit(x_train_pr, y_train)
print('The R^2 value using test data is: ', RR.score(x_test_pr, y_test))
